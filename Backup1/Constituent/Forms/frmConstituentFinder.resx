<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAEwAAACIAAAAoAAAAKAAA
        ACcAAAAjAAAAHgAAABcAAAAQAAAACAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAMAAAAGAAAACAAAAAsAAAAKAAAABAAAAAAAAAAAAAEABCwPAFRIGACeVR4EtFcg
        B7lXIge5TRwEsUIWAKY0DwCUJAkAgAoBAGYAAABOAAAAOgAAACYAAAASAAAABQAAAAAAAAAAAAAAAAAA
        AAQAAAAOAAAAHQAAACwAAAA4AAAARwEBB1YCBBFkAgMNZAAAAFcAAABFAAAAJAAAAAZtJQFpqjgL9cNG
        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
        Vf87Oz3/GxsdmgEBAQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQWpSK2CI7FSA
        qf9Wf6n/V4Gr/z5tmP8OQmi3AAwVHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIiJA8nJyqFPDs90ldV
        VvBUUlPwNjY4zhcYGnUDAwQGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAQmo1EU93jRlTerINR26iAStHXwAKEg8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAhISQbKSkrMicnKjIeHiMYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////4AH/gMAAOAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAYAAAAPAAAAH4AGAB/gBwAPwAQAD8AEAA+AAgAPgAIAD4ADAA+AAwAPgAcAH8AHAB/AD
        wA/4B+Af/A/4f/////////////////////8=
</value>
  </data>
</root>